#!/usr/bin/env python
import rospy
import networkx as nx
import csv
#import matplotlib.pyplot as plt
from planning.srv import *
from geometry_msgs.msg import Vector3

class Planer:
	def __init__(self):
		self.map_int2str ={} 
		self.map_str2int ={} 
		self.map_int2state ={} 
		self.G=nx.DiGraph()
	def read_cvs(self):
		with open('/home/jessyxie/dumpling_ws/src/planning/include/planning/planning_map_int2str.csv', mode='r') as infile:
			reader = csv.reader(infile)
			self.map_int2str= {int(rows[0]):str(rows[1]) for rows in reader}
		with open('/home/jessyxie/dumpling_ws/src/planning/include/planning/planning_map_str2int.csv', mode='r') as infile:
			reader = csv.reader(infile)
			self.map_str2int= {str(rows[0]):int(rows[1]) for rows in reader}
		with open('/home/jessyxie/dumpling_ws/src/planning/include/planning/node_position.csv', mode='r') as infile:
			reader = csv.reader(infile)
			self.map_int2state= {int(rows[0]):(float(rows[1]),float(rows[2]),float(rows[3])) for rows in reader}	
		#print(self.map_int2state)
	def handle_plan_path(self,req):
		start = self.map_int2str[req.start]
		goal = self.map_int2str[req.goal]
		path = nx.astar_path(self.G,start,goal)
		result = []
		for node in path:
			map_state = self.map_str2int[node]
			state = Vector3()
			cur_state = self.map_int2state[map_state]
			state.x = cur_state[0]
			state.y = cur_state[1]
			state.z = cur_state[2]
			#result.append()
			result.append(state)
		result.pop(0)
		print(result)
		return planResponse(result)

	def planning_server(self):
		 rospy.init_node('planning_server')
		 s = rospy.Service('plan_path', plan, self.handle_plan_path)
		 print("ready to plan path")
		 rospy.spin()

	def initialize_map(self):
		
		self.G.add_nodes_from(["start","t1_right","t2_down","t3_down","n1_up","n1_right","n2","n3_right","n3_down","n4_down","n4_left","n5","end"])
		

		self.G.add_edge("start","n1_up")
		self.G.add_edge("n1_up","n1_right")
		self.G.add_edge("n1_right","t1_right")
		self.G.add_edge("t1_right","n2")
		self.G.add_edge("n2","n3_right")
		self.G.add_edge("n3_right","n3_down")

		self.G.add_edge("n3_down","t2_down")
		self.G.add_edge("t2_down","t3_down")
		self.G.add_edge("t3_down","n4_down")
		self.G.add_edge("n4_down","n4_left")
		self.G.add_edge("n4_left","n5")
		self.G.add_edge("n5","end")

		
		#print(G.edges())
		'''
		pos = nx.spring_layout(G)
		nx.draw_networkx_nodes(G, pos, node_size = 1500)
		nx.draw_networkx_labels(G, pos)
		nx.draw_networkx_edges(G, pos, edgelist=black_edges, arrows=True)
		plt.axis('off')
		plt.show()'''



if __name__ == '__main__':
	server = Planer()
	server.initialize_map()
	server.read_cvs()
	server.planning_server()
